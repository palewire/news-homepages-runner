name: Archive
description: Run a suite of archiving routines for the provided source

inputs:
  source:
    description: The command config spelling out what to screenshot
    required: true
  access-key:
    description: An API key with permission to post to archive.org
    required: true
  secret-key:
    description: An API secret with permission to post to archive.org
    required: true
  collection:
    description: The identifier of the target archive.org collection
    required: true

runs:
  using: 'composite'
  steps:
    - id: install
      name: Install Python dependencies
      uses: ./.github/actions/install

    - id: cache-playwright
      name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright/
        key: ${{ runner.os }}-browsers

    - id: install-playwright
      name: Install Playwright dependencies
      run: pipenv run playwright install --with-deps chromium
      shell: bash

    - id: mk-dist-dir
      name: Create distribution directory
      run: mkdir _dist
      shell: bash

    - id: shoot-cropped-screenshot
      name: Cropped screenshot
      run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- pipenv run newshomepages-screenshot ${{ inputs.source }} -o _dist
      if: ${{ always() }}
      shell: bash

    - id: save-cropped-screenshot
      name: Save cropped screenshot artifact
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: screenshots
        path: ./_dist/${{ inputs.source }}.jpg
        if-no-files-found: warn

    - id: shoot-full-page-screenshot
      name: Take full page screenshot
      run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- pipenv run newshomepages-screenshot ${{ inputs.source }} --full-page -o _dist
      if: ${{ always() }}
      shell: bash

    - id: save-full-page-screenshot
      name: Save full page screenshot artifact
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: full-page-screenshots
        path: ./_dist/${{ inputs.source }}.fullpage.jpg
        if-no-files-found: warn

    - id: get-hyperlinks
      name: Get hyperlinks
      run: pipenv run newshomepages-hyperlinks ${{ inputs.source }} -o _dist
      if: ${{ always() }}
      shell: bash

    - id: save-hyperlinks
      name: Save hyperlinks artifact
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: hyperlinks
        path: ./_dist/${{ inputs.source }}.hyperlinks.json
        if-no-files-found: warn

    - id: get-a11y
      name: Get a11y tree
      run: pipenv run newshomepages-accessibility ${{ inputs.source }} -o _dist
      if: ${{ always() }}
      shell: bash

    - id: save-a11y
      name: Save a11y artifact
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: accessibility
        path: ./_dist/${{ inputs.source }}.accessibility.json
        if-no-files-found: warn

    - id: ping-wayback
      name: Save in Wayback Machine
      run: pipenv run newshomepages-wayback ${{ inputs.source }} -o _dist
      if: ${{ always() }}
      shell: bash
      env:
        IA_ACCESS_KEY: ${{ inputs.access-key }}
        IA_SECRET_KEY: ${{ inputs.secret-key }}

    - id: save-wayback
      name: Save Wayback Machine artifact
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: wayback
        path: ./_dist/${{ inputs.source }}.wayback.json
        if-no-files-found: warn

    - id: get-site-url
      name: Get URL for Lighthouse
      run: |
        export URL=$(pipenv run python -c "from newshomepages import utils; print(utils.get_site('${{ inputs.source }}')['url'])")
        echo "url=$(echo $URL)" >> $GITHUB_OUTPUT
      if: ${{ always() }}
      shell: bash

    - id: lighthouse-audit
      name: Lighthouse audit
      uses: treosh/lighthouse-ci-action@v9
      if: ${{ always() }}
      with:
        urls: ${{ steps.get-site-url.outputs.url }}
        runs: 3


    - id: mv-lighthouse
      name: Move Lighthouse report
      run: mv ${{ steps.lighthouse-audit.outputs.resultsPath }}/manifest.json ./_dist/${{ inputs.source }}.lighthouse.json
      if: ${{ always() }}
      shell: bash

    - id: save-lighthouse
      name: Save Lighthouse artifact
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: lighthouse
        path: ./_dist/${{ inputs.source }}.lighthouse.json
        if-no-files-found: warn

    - id: html
      name: Fetch HTML
      run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- pipenv run python -m newshomepages.html ${{ matrix.source }} -o _dist
      if: ${{ always() }}
      shell: bash

    - id: save
      name: Save artifact
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: html
        path: _dist/${{ inputs.source }}.html
        if-no-files-found: warn

    - id: archive
      name: Archive
      run: pipenv run newshomepages-archive ${{ inputs.source }} --verbose -i ./_dist/
      if: ${{ always() }}
      shell: bash
      env:
        IA_ACCESS_KEY: ${{ inputs.access-key }}
        IA_SECRET_KEY: ${{ inputs.secret-key }}
        IA_COLLECTION:  ${{ inputs.collection }}
